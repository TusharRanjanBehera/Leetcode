#include <iostream>
#include <algorithm> // for std::max
using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

int height(TreeNode* p){
    int x,y;
    if(p == nullptr) return 0;
    x = height(p->left);
    y = height(p->right);
    return 1+max(x,y);
}
TreeNode* inpre(TreeNode* s){
    while(s && s->right !=nullptr){
        s = s->right;
    }
    return s;
}
TreeNode* insuc(TreeNode* s){
    while(s&&s->left !=nullptr){
        s = s->left;
    }
    return s;
}
TreeNode* deleteNode(TreeNode* root, int key) {
    TreeNode* t;
    if(root == nullptr)
        return nullptr;
    if(root->left == nullptr && root->right == nullptr && root->val == key){
        delete root;
        return nullptr;
    }
    if(key > root->val){
        root->right = deleteNode(root->right,key);
    }else if(key < root->val){
        root->left = deleteNode(root->left,key);
    }else if(key == root->val){
        if(height(root->left)>height(root->right)){
            t = inpre(root->left);
            root->val = t->val;
            root->left = deleteNode(root->left,t->val);
        }else{
            t = insuc(root->right);
            root->val = t->val;
            root->right = deleteNode(root->right,t->val);
        }
    }
    return root;
}
TreeNode* insertIntoBST(TreeNode* root, int val) {
    if (!root)
        return new TreeNode(val);
    if (val < root->val)
        root->left = insertIntoBST(root->left, val);
    else
        root->right = insertIntoBST(root->right, val);
    return root;
}

void inorderTraversal(TreeNode* root){
    if(root != nullptr){
        inorderTraversal(root->left);
        cout << root->val << " ";
        inorderTraversal(root->right);
    }
}

int main()
{
    TreeNode* root = nullptr;
    // Insert nodes
    root = insertIntoBST(root, 50);
    root = insertIntoBST(root, 30);
    root = insertIntoBST(root, 20);
    root = insertIntoBST(root, 40);
    root = insertIntoBST(root, 70);
    root = insertIntoBST(root, 60);
    root = insertIntoBST(root, 80);

    cout << "Inorder traversal before deletion: ";
    inorderTraversal(root);
    cout << endl;

    int key = 0; // key to delete (not present in tree)
    root = deleteNode(root, key);

    cout << "Inorder traversal after trying to delete " << key << ": ";
    inorderTraversal(root);
    cout << endl;

    return 0;
}
